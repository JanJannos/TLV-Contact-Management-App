{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development-T410\\\\WEB API + Angular 8 + React\\\\Code\\\\TLV-React-WEB-API\\\\ReactTLV\\\\src\\\\components\\\\EditContactModal.js\";\n\n/* eslint-disable no-useless-constructor */\nimport React, { Component } from 'react';\nimport { Modal, Button, Row, Col, Form } from 'react-bootstrap';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nexport class EditContactModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.snackbarClose = event => {\n      this.setState({\n        snackbaropen: false,\n        person: ''\n      });\n    };\n\n    this.handlePersonChange = e => {\n      this.setState({\n        person: e.target.value\n      });\n    };\n\n    this.state = {\n      deps: [],\n      snackbaropen: false,\n      snackbarmsg: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  /**\r\n   * This function makes sure to hide the Popup\r\n   */\n\n\n  /*\r\n   * Execute the SAVE function\r\n   */\n  handleSubmit(event) {\n    event.preventDefault(); // prevent from submitting the page\n\n    fetch('http://localhost:54178/api/contact/', {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ContactID: event.target.ContactID.value,\n        FirstName: event.target.FirstName.value,\n        LastName: event.target.LastName.value,\n        PhoneNumber: event.target.PhoneNumber.value,\n        Email: event.target.Email.value,\n        ContactType: event.target.PersonType.value,\n        Notes: event.target.Faculty !== undefined ? event.target.Faculty.value : event.target.GraduationYear !== undefined ? event.target.GraduationYear.value : event.target.Subject !== undefined ? event.target.Subject.value : ''\n      })\n    }).then(resp => resp.json()).then(result => {\n      // SUCCESS : alert(result);\n      this.setState({\n        snackbaropen: true,\n        snackbarmsg: result\n      });\n    }, // FAIL : alert('Failed')\n    error => this.setState({\n      snackbaropen: true,\n      snackbarmsg: 'Failed!'\n    }));\n  }\n  /*\r\n    Change the Person type based on user click \r\n  */\n\n\n  /**\r\n   Show / Hide update button based if we are in View or Edit mode\r\n   */\n  renderUpdateButton() {\n    if (this.props.disablefields === 'false') {\n      return React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Update\");\n    } // else\n\n\n    return null;\n  }\n  /*\r\n    Render a specific column based on user's choice in the Drop Down  \r\n  */\n\n\n  renderSpecificColumns(type, graduationyear, subject, faculty) {\n    // eslint-disable-next-line default-case\n    switch (type) {\n      case 'Student':\n        return React.createElement(Form.Group, {\n          controlId: \"Faculty\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(Form.Label, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"Faculty\"), React.createElement(Form.Control, {\n          type: \"Faculty\",\n          name: \"Faculty\",\n          required: true,\n          defaultValue: faculty,\n          disabled: this.props.disablefields !== 'false' ? true : false,\n          placeholder: \"Faculty\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }));\n\n      case 'Alumni':\n        return React.createElement(Form.Group, {\n          controlId: \"Graduation Year\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(Form.Label, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"Graduation Year\"), React.createElement(Form.Control, {\n          type: \"text\",\n          name: \"GraduationYear\",\n          required: true,\n          defaultValue: graduationyear,\n          disabled: this.props.disablefields !== 'false' ? true : false,\n          placeholder: \"Graduation Year\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }));\n\n      case 'Lecturer':\n        return React.createElement(Form.Group, {\n          controlId: \"Subject\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(Form.Label, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, \"Subject\"), React.createElement(Form.Control, {\n          type: \"Subject\",\n          name: \"Subject\",\n          required: true,\n          defaultValue: subject,\n          disabled: this.props.disablefields !== 'false' ? true : false,\n          placeholder: \"Subject\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }));\n    }\n  }\n  /**\r\n   *  Render function\r\n   */\n\n\n  render() {\n    const people_list = [{\n      PersonType: '1',\n      PersonDescription: 'Student'\n    }, {\n      PersonType: '2',\n      PersonDescription: 'Alumni'\n    }, {\n      PersonType: '3',\n      PersonDescription: 'Lecturer'\n    }];\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      open: this.state.snackbaropen,\n      autoHideDuration: 3000,\n      onClose: this.snackbarClose,\n      message: React.createElement(\"span\", {\n        id: \"message-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.state.snackbarmsg),\n      action: [React.createElement(IconButton, {\n        key: \"close\",\n        \"arial-label\": \"Close\",\n        color: \"inherit\",\n        onClick: this.snackbarClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"x\")],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Modal, Object.assign({}, this.props, {\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.props.disablefields !== 'false' ? 'User Info' : 'Update Contact')), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"ContactID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Contact ID\"), React.createElement(Form.Control, {\n      type: \"text\",\n      disabled: true,\n      required: true,\n      defaultValue: this.props.contactid,\n      name: \"ContactID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"FirstName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"First Name\"), React.createElement(Form.Control, {\n      type: \"text\",\n      disabled: this.props.disablefields !== 'false' ? true : false,\n      defaultValue: this.props.firstname,\n      name: \"FirstName\",\n      required: true,\n      placeholder: \"First Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"LastName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Last Name\"), React.createElement(Form.Control, {\n      type: \"text\",\n      disabled: this.props.disablefields !== 'false' ? true : false,\n      defaultValue: this.props.lastname,\n      name: \"LastName\",\n      required: true,\n      placeholder: \"Last Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"PersonType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Person Type\"), React.createElement(Form.Control, {\n      as: \"select\",\n      disabled: true,\n      defaultValue: this.props.contacttype,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, people_list.map(ptype => React.createElement(\"option\", {\n      key: ptype.PersonType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, ptype.PersonDescription)))), React.createElement(Form.Group, {\n      controlId: \"PhoneNumber\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Phone Number\"), React.createElement(Form.Control, {\n      type: \"text\",\n      name: \"PhoneNumber\",\n      disabled: this.props.disablefields !== 'false' ? true : false,\n      required: true,\n      defaultValue: this.props.phonenumber,\n      placeholder: \"PhoneNumber\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Form.Control, {\n      type: \"Email\",\n      name: \"Email\",\n      disabled: this.props.disablefields !== 'false' ? true : false,\n      defaultValue: this.props.email,\n      required: true,\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    })), this.renderSpecificColumns(this.props.contacttype, this.props.graduationyear, this.props.subject, this.props.faculty), React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, this.renderUpdateButton()))))), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"danger\",\n      onClick: this.props.onHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Close\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Development-T410\\WEB API + Angular 8 + React\\Code\\TLV-React-WEB-API\\ReactTLV\\src\\components\\EditContactModal.js"],"names":["React","Component","Modal","Button","Row","Col","Form","Snackbar","IconButton","EditContactModal","constructor","props","snackbarClose","event","setState","snackbaropen","person","handlePersonChange","e","target","value","state","deps","snackbarmsg","handleSubmit","bind","preventDefault","fetch","method","headers","Accept","body","JSON","stringify","ContactID","FirstName","LastName","PhoneNumber","Email","ContactType","PersonType","Notes","Faculty","undefined","GraduationYear","Subject","then","resp","json","result","error","renderUpdateButton","disablefields","renderSpecificColumns","type","graduationyear","subject","faculty","render","people_list","PersonDescription","vertical","horizontal","contactid","firstname","lastname","contacttype","map","ptype","phonenumber","email","onHide"],"mappings":"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","sourcesContent":["/* eslint-disable no-useless-constructor */\r\nimport React, { Component } from 'react';\r\nimport { Modal, Button, Row, Col, Form } from 'react-bootstrap';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport class EditContactModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { deps: [], snackbaropen: false, snackbarmsg: '' };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  /**\r\n   * This function makes sure to hide the Popup\r\n   */\r\n  snackbarClose = event => {\r\n    this.setState({ snackbaropen: false, person: '' });\r\n  };\r\n\r\n  /*\r\n   * Execute the SAVE function\r\n   */\r\n  handleSubmit(event) {\r\n    event.preventDefault(); // prevent from submitting the page\r\n    fetch('http://localhost:54178/api/contact/', {\r\n      method: 'PUT',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        ContactID: event.target.ContactID.value,\r\n        FirstName: event.target.FirstName.value,\r\n        LastName: event.target.LastName.value,\r\n        PhoneNumber: event.target.PhoneNumber.value,\r\n        Email: event.target.Email.value,\r\n        ContactType: event.target.PersonType.value,        \r\n        Notes: event.target.Faculty !== undefined ? event.target.Faculty.value : \r\n             event.target.GraduationYear !== undefined ? event.target.GraduationYear.value :\r\n          event.target.Subject !== undefined ? event.target.Subject.value : ''\r\n      })\r\n    })\r\n      .then(resp => resp.json())\r\n      .then(\r\n        result => {\r\n          // SUCCESS : alert(result);\r\n          this.setState({ snackbaropen: true, snackbarmsg: result });\r\n        },\r\n        // FAIL : alert('Failed')\r\n        error => this.setState({ snackbaropen: true, snackbarmsg: 'Failed!' })\r\n      );\r\n  }\r\n\r\n  /*\r\n    Change the Person type based on user click \r\n  */\r\n  handlePersonChange = e => {\r\n    this.setState({ person: e.target.value });\r\n  };\r\n\r\n  /**\r\n   Show / Hide update button based if we are in View or Edit mode\r\n   */\r\n  renderUpdateButton() {\r\n    if (this.props.disablefields === 'false') {\r\n      return (\r\n        <Button variant='primary' type='submit'>\r\n          Update\r\n        </Button>\r\n      );\r\n    }\r\n    // else\r\n    return null;\r\n  }\r\n\r\n  /*\r\n    Render a specific column based on user's choice in the Drop Down  \r\n  */\r\n  renderSpecificColumns(type , graduationyear , subject , faculty) {\r\n    // eslint-disable-next-line default-case\r\n    switch (type) {\r\n      case 'Student':\r\n        return (\r\n          <Form.Group controlId='Faculty'>\r\n            <Form.Label>Faculty</Form.Label>\r\n            <Form.Control\r\n              type='Faculty'\r\n              name='Faculty'\r\n              required\r\n              defaultValue={faculty}\r\n              disabled={this.props.disablefields !== 'false' ? true : false}\r\n              placeholder='Faculty'\r\n            />\r\n          </Form.Group>\r\n        );\r\n\r\n      case 'Alumni':\r\n        return (\r\n          <Form.Group controlId='Graduation Year'>\r\n            <Form.Label>Graduation Year</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              name='GraduationYear'\r\n              required\r\n              defaultValue={graduationyear}\r\n              disabled={this.props.disablefields !== 'false' ? true : false}\r\n              placeholder='Graduation Year'\r\n            />\r\n          </Form.Group>\r\n        );\r\n      case 'Lecturer':\r\n        return (\r\n          <Form.Group controlId='Subject'>\r\n            <Form.Label>Subject</Form.Label>\r\n            <Form.Control\r\n              type='Subject'\r\n              name='Subject'\r\n              required\r\n              defaultValue={subject}\r\n              disabled={this.props.disablefields !== 'false' ? true : false}\r\n              placeholder='Subject'\r\n            />\r\n          </Form.Group>\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Render function\r\n   */\r\n  render() {\r\n    const people_list = [\r\n      {\r\n        PersonType: '1',\r\n        PersonDescription: 'Student'\r\n      },\r\n      {\r\n        PersonType: '2',\r\n        PersonDescription: 'Alumni'\r\n      },\r\n      {\r\n        PersonType: '3',\r\n        PersonDescription: 'Lecturer'\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <div className='container'>\r\n        <Snackbar\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n          open={this.state.snackbaropen}\r\n          autoHideDuration={3000}\r\n          onClose={this.snackbarClose}\r\n          message={<span id='message-id'>{this.state.snackbarmsg}</span>}\r\n          action={[\r\n            <IconButton\r\n              key='close'\r\n              arial-label='Close'\r\n              color='inherit'\r\n              onClick={this.snackbarClose}\r\n            >\r\n              x\r\n            </IconButton>\r\n          ]}\r\n        />\r\n        <Modal\r\n          {...this.props}\r\n          size='lg'\r\n          aria-labelledby='contained-modal-title-vcenter'\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='contained-modal-title-vcenter'>\r\n              {this.props.disablefields !== 'false'\r\n                ? 'User Info'\r\n                : 'Update Contact'}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Row>\r\n              <Col sm={6}>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                  {/* ContactID */}\r\n                  <Form.Group controlId='ContactID'>\r\n                    <Form.Label>Contact ID</Form.Label>\r\n                    <Form.Control\r\n                      type='text'\r\n                      disabled\r\n                      required\r\n                      defaultValue={this.props.contactid}\r\n                      name='ContactID'\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  {/* FirstName */}\r\n                  <Form.Group controlId='FirstName'>\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control\r\n                      type='text'\r\n                      disabled={\r\n                        this.props.disablefields !== 'false' ? true : false\r\n                      }\r\n                      defaultValue={this.props.firstname}\r\n                      name='FirstName'\r\n                      required\r\n                      placeholder='First Name'\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  {/* LastName */}\r\n                  <Form.Group controlId='LastName'>\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control\r\n                      type='text'\r\n                      disabled={\r\n                        this.props.disablefields !== 'false' ? true : false\r\n                      }\r\n                      defaultValue={this.props.lastname}\r\n                      name='LastName'\r\n                      required\r\n                      placeholder='Last Name'\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  {/* Person Type */}\r\n                  <Form.Group controlId='PersonType'>\r\n                    <Form.Label>Person Type</Form.Label>\r\n                    <Form.Control\r\n                      as='select'\r\n                      disabled\r\n                      defaultValue={this.props.contacttype}\r\n                    >\r\n                      {people_list.map(ptype => (\r\n                        <option key={ptype.PersonType}>\r\n                          {ptype.PersonDescription}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n\r\n                  {/* PhoneNumber */}\r\n                  <Form.Group controlId='PhoneNumber'>\r\n                    <Form.Label>Phone Number</Form.Label>\r\n                    <Form.Control\r\n                      type='text'\r\n                      name='PhoneNumber'\r\n                      disabled={\r\n                        this.props.disablefields !== 'false' ? true : false\r\n                      }\r\n                      required\r\n                      defaultValue={this.props.phonenumber}\r\n                      placeholder='PhoneNumber'\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  {/* Email */}\r\n                  <Form.Group controlId='Email'>\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control\r\n                      type='Email'\r\n                      name='Email'\r\n                      disabled={\r\n                        this.props.disablefields !== 'false' ? true : false\r\n                      }\r\n                      defaultValue={this.props.email}\r\n                      required\r\n                      placeholder='Email'\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  {/* Optional Fields */}\r\n\r\n                  {/* Pass here params with the 3 fields  */}\r\n                  {this.renderSpecificColumns(this.props.contacttype,this.props.graduationyear , this.props.subject , this.props.faculty )}\r\n\r\n                  <Form.Group>\r\n                    {/* <Button variant='primary' type='submit'>\r\n                      Update\r\n                    </Button> */}\r\n                    {this.renderUpdateButton()}\r\n                  </Form.Group>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant='danger' onClick={this.props.onHide}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}